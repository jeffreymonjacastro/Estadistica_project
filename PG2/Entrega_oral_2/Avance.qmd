---
title: "Jeff"
format: html
editor: visual
---

## Item 2

Lenguajes que causan mas los problemas mentales:

-   Autismo: Crystal Lua Rust

-   Aprendizaje: APL Lua Assembly

-   Emocionales: Erlang Lua LISP

-   Memoria: Erlang Crystal Lua

-   Ansiedad: SAS Ruby Lua

    **E1: Usa uno o más de los lenguajes problemáticos**

```{r}
list <- c('Crystal', 'Lua', 'Rust', 'APL', 'Assembly', 'Erlang', 'LISP', 'SAS')

e1 = encuesta$Crystal | encuesta$Lua | encuesta$Rust | encuesta$APL | encuesta$Assembly | encuesta$Erlang | encuesta$LISP | encuesta$SAS

probE1 = sum(e1)/nrow(encuesta)
probE1
```

**probE2: Sufren de problemas mentales**

```{r}
# Crear una columna en el dataframe 'encuesta' que cuente la cantidad de problemas mentales (valores TRUE)
encuesta$num_problemas_mentales <- rowSums(encuesta[, c("Memoria", "Aprendizaje", "Autismo", "Ansiedad", "Emocional")])

# Calcular la probabilidad de que alguien sufra de 3 o más problemas mentales
probE2 <- sum(encuesta$num_problemas_mentales > 0) / nrow(encuesta)

# Imprimir el resultado
probE2
```

**E1 y probE2**

```{r}
total = data.frame(e1, encuesta$num_problemas_mentales)
probe1probE2 = nrow(total[total$e1 == TRUE & total$encuesta.num_problemas_mentales > 0,])/nrow(total)
probe1probE2

total$encuesta.num_problemas_mentales = total$encuesta.num_problemas_mentales > 0

mosaicplot(table(total$e1, total$encuesta.num_problemas_mentales), main = "Problemas mentales y lenguajes problemáticos")
```

**Comprobamos con las fórmulas de probabilidades**

```{r}
probE2dE1 <- probe1probE2/probE1
cat("P(E2): ", probE2)
cat("\nP(E2|E1): ", probE2dE1)
cat("\nE1-E2",  probE2 - probE1)

cat("\nP(E1 interseccion E2)", probe1probE2)
cat("\nP(E2)*P(E1)",probE1 * probE2)
```

**Variables continuas**

-   Elegir 10 programadores del mejor lenguaje (JavaScript)

-   Elegir 10 programadores del peor lenguaje(APL)

Sacamos Probabilidad JavaScript:

```{r}
eJS <- sum(encuesta$JavaScript)
probJS <- eJS/nrow(encuesta)
probJS
```

Sacamos Probabilidad APL:

```{r}
eAPL <- sum(encuesta$APL)
probAPL <- eAPL/nrow(encuesta)
probAPL
```

Función para ver cuantas personas programan en SOLO JS:\

```{r}
for (i in 1:nrow(encuesta)) {
  cont <- 0
  for (pl in language) {
    if (encuesta[i, pl] == TRUE){
      cont <- cont + 1
    }
  }
  encuesta[i, 'TotalLenguages'] <- cont
}
```

`E1` Escoger una muestra de 100 programadores (con reemplazo) y contar el número de programadores que programen en JavaScript y que ganen mas del promedio.

Éxito: Que el programador escogido domine en JS y gane mas que el promedio

Calculamos la probabilidad de éxito asumiendo que nuestra muestra es representativa.

```{r}
p <- round( nrow(encuesta %>% filter(encuesta$JavaScript == TRUE & encuesta$Salary > promedio))/nrow(encuesta) ,2)
p
```
```{r}
n <- 100
```




$$ 
X : \text{Número de programadores que solo programen en JavaScript y ganan mas que el promedio en una muestra de 100 programadores} \\

\text{Rango(X) = 0 ,1 ,2 ,3 ,4 ,5 ,6 ,7 ........,100} \\

X - Bin(n,p) = Bin(100,0.32)


$$

```{r}
plot(0:100, dbinom(0:100, n, p), type = 'h', lwd = 2, xlab = "Número de éxitos", ylab = "Probabilidad", main = "Distribución Binomial")
```

## Valor Esperado

$$ 
\text{Para una binomial: }   \mathbb{E}(X) =  np 
$$


```{r}
media <- n*p
media
```

Ahora calculamos la esperanza con la sumatoria:

$$
\mathbb{E}(X) = \sum xp(x)
$$

```{r}
Ex <-sum(0:100*dbinom(0:100 , n , p))


Ex
```



Varianza:

$$
Var(X) = np(1-p)
$$

```{r}
varianza <- n*p*(1-p)
varianza
```


$$
Var(X) = \sum_{x \text{ } \in Ran(X)}(x-E(X))^{2}p(x)
$$

```{r}
sum((0:100 - Ex)^{2}*dbinom(0:100 , n ,p))
```
Ejemplo: 




Hicimos un gráfico y lo dividimos en un rango de 0 a 100, podemos observar que el pico se encuentra en 32 éxitos, lo cual coincide aproximadamente con nuestra probabilidad máxima, calculada anteriormente (0.32).

```{r}
rango <- 0:100

# Calcular las probabilidades para los valores del rango
probabilidades <- dbinom(rango, n, p)

# Graficar la distribución binomial
plot(rango, probabilidades, type = 'h', xlab = "Valores", ylab = "Probabilidades", main = "Distribución Binomial")
```

Comprobamos que la suma de la función de la distribución binomial da 1.

```{r}
sum(dbinom(rango,n,p))
```

Valor esperado:

```{r}
media <- n*p
```

Esto quiere decir que en promedio 27 programadores programan en JavaScript y además ganan más que el salario promedio.

```{r}
Ex <- sum(rango*dbinom(rango,n,p))
media
Ex
```

Notamos que los valores coinciden.

Varianza:

```{r}
var <- n*p*(1-p)
var
```

Explicar



### Hipergeometrica

## Variable `TotalLenguajes` 


1) Población

```{r}
nrow(encuesta)
```

2) Número de éxitos
```{r}
nrow(encuesta %>% filter(TotalLenguages >= 6))
```


`E2`: De una población de `29204` programadores, donde `10492` dominan de 6 lenguajes a más . Se escogerá una muestra de `15000` programadores y se contara el número de programadores que dominan de 6 lenguajes a más.

```{r}
N <- 29204 #población
n <- 15000 #muestra
k <- 10492 #éxitos
```



$$
Y : \text{Número de programadores que usan de 6 a más lenguajes de programación } \\
\text{de una muestra de 15000 de una poblacion de 29204 donde 10492 cumplen la condicion}
$$

$$
Y - H(N,n,k) = H(29204 , 15000 , 10492) \\
Rang(Y) = 0,1,2,3,......,10492
$$
```{r}
plot(5000:5900, dhyper(5000:5900, k , N-k , n), type = 'h', lwd = 2, xlab = "Número de éxitos", ylab = "Probabilidad", main = "Distribución Hipergeometrica")
```
1) Esperanza

$$
   E(Y) = n\frac{k}{N}
$$
```{r}
media <- (n*k)/N
media
```

$$\text{Tambien se puede calcular : } \mathbb{E}(Y) = \sum_{y \text{ } \in \text{} Ran(Y) } yp(y) $$


```{r}
Ex <- sum(0:10492*dhyper(0:10492 , k , N-k , n))
Ex
```
2) Varianza

$$
\text{Var}(Y) = \frac{n \cdot k \cdot (N - k) \cdot (N - n)}{N^2 \cdot (N - 1)}

$$


```{r}
varianza <- (n*k*(N-k)*(N-n))/(N*N*(N-1))
varianza
```

$$
Var(Y) = \sum_{y \text{ } \in \text{ } Ran(Y)}(y-E(y))^{2}p(y)
$$

```{r}
Varx <-sum( ((0:10492 - Ex)^2)*dhyper(0:10492,k,N-k , n))
Varx
```

Ejemplo



## Continuas











